{"version":3,"sources":["components/SpecBadge.jsx","components/utils.jsx","components/AllStars.jsx","components/ErrorWarning.jsx","components/EncounterBadge.jsx","components/Encounters.jsx","components/AppContainer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SpecBadge","spec","item","className","src","Warden","Guardian","Feral","Restoration","Balance","Beastmastery","Marksmanship","Survival","Arcane","Fire","Frost","Protection","Retribution","Discipline","Holy","Shadow","Healing","Assassination","Combat","Subtlety","Elemental","Enhancement","Affliction","Demonology","Destruction","Arms","Fury","Champion","Melee","alt","capitalise","str","toUpperCase","substring","roundTwoPlaces","num","Math","round","millisToMinutesAndSeconds","millis","minutes","floor","seconds","toFixed","AllStars","points","rank","regionRank","serverRank","rankPercent","JSON","stringify","ErrorWarning","errorMessage","Alert","severity","style","maxWidth","margin","EncounterBadge","name","encounter","Magtheridon","width","height","Encounters","bestAmount","medianPercent","totalKills","fastestKill","allStars","AppContainer","useState","characterPerformance","setCharacterPerformance","setName","serverSlug","setServerSlug","serverRegion","setServerRegion","apiError","setApiError","isFetching","setIsFetching","onSubmit","e","preventDefault","axios","get","params","then","res","data","catch","error","response","type","id","placeholder","value","onChange","target","disabled","console","log","CircularProgress","Object","keys","length","bestPerformanceAverage","medianPerformanceAverage","map","rankings","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9048b12d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SpecBadge = ({ item }) => {\n  const {\n    spec,\n  } = item;\n\n  const specImg = {\n    Warden: 'https://assets.rpglogs.com/img/warcraft/icons/Druid-Warden.jpg',\n    Guardian: 'https://assets.rpglogs.com/img/warcraft/icons/Druid-Guardian.jpg',\n    Feral: 'https://assets.rpglogs.com/img/warcraft/icons/Druid-Feral.jpg',\n    Restoration: 'https://assets.rpglogs.com/img/warcraft/icons/Druid-Restoration.jpg',\n    Balance: 'https://assets.rpglogs.com/img/warcraft/icons/Druid-Balance.jpg',\n    Beastmastery: 'https://assets.rpglogs.com/img/warcraft/icons/Hunter-BeastMastery.jpg',\n    Marksmanship: 'https://assets.rpglogs.com/img/warcraft/icons/Hunter-Marksmanship.jpg',\n    Survival: 'https://assets.rpglogs.com/img/warcraft/icons/Hunter-Survival.jpg',\n    Arcane: 'https://assets.rpglogs.com/img/warcraft/icons/Mage-Arcane.jpg',\n    Fire: 'https://assets.rpglogs.com/img/warcraft/icons/Mage-Fire.jpg',\n    Frost: 'https://assets.rpglogs.com/img/warcraft/icons/Mage-Frost.jpg',\n    Protection: 'https://assets.rpglogs.com/img/warcraft/icons/Paladin-Protection.jpg',\n    Retribution: 'https://assets.rpglogs.com/img/warcraft/icons/Paladin-Retribution.jpg',\n    Discipline: 'https://assets.rpglogs.com/img/warcraft/icons/Priest-Discipline.jpg',\n    Holy: 'https://assets.rpglogs.com/img/warcraft/icons/Priest-Holy.jpg',\n    Shadow: 'https://assets.rpglogs.com/img/warcraft/icons/Priest-Shadow.jpg',\n    Healing: 'https://assets.rpglogs.com/img/warcraft/icons/Priest-Healing.jpg',\n    Assassination: 'https://assets.rpglogs.com/img/warcraft/icons/Rogue-Assassination.jpg',\n    Combat: 'https://assets.rpglogs.com/img/warcraft/icons/Rogue-Combat.jpg',\n    Subtlety: 'https://assets.rpglogs.com/img/warcraft/icons/Rogue-Subtlety.jpg',\n    Elemental: 'https://assets.rpglogs.com/img/warcraft/icons/Shaman-Elemental.jpg',\n    Enhancement: 'https://assets.rpglogs.com/img/warcraft/icons/Shaman-Enhancement.jpg',\n    Affliction: 'https://assets.rpglogs.com/img/warcraft/icons/Warlock-Affliction.jpg',\n    Demonology: 'https://assets.rpglogs.com/img/warcraft/icons/Warlock-Demonology.jpg',\n    Destruction: 'https://assets.rpglogs.com/img/warcraft/icons/Warlock-Destruction.jpg',\n    Arms: 'https://assets.rpglogs.com/img/warcraft/icons/Warrior-Arms.jpg',\n    Fury: 'https://assets.rpglogs.com/img/warcraft/icons/Warrior-Fury.jpg',\n    Champion: 'https://assets.rpglogs.com/img/warcraft/icons/Warrior-Champion.jpg',\n    Melee: 'https://assets.rpglogs.com/img/warcraft/icons/Warrior-Melee.jpg',\n  };\n\n  return (\n    <div className=\"spec-badge-img\">\n      <img src={specImg[spec]} alt={spec} />\n    </div>\n  );\n};\n","const capitalise = (str) => str[0].toUpperCase() + str.substring(1);\n\nconst roundTwoPlaces = (num) => Math.round(num * 100) / 100;\n\nconst roundNearest = (num) => Math.round(num);\n\nconst millisToMinutesAndSeconds = (millis) => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\n  return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nexport {\n  capitalise,\n  roundTwoPlaces,\n  roundNearest,\n  millisToMinutesAndSeconds,\n};\n","import React from 'react';\nimport { SpecBadge } from './SpecBadge';\nimport { roundTwoPlaces } from './utils';\n\n// item.item\nexport const AllStars = ({ item }) => {\n  const {\n    points,\n    rank,\n    regionRank,\n    serverRank,\n    rankPercent,\n  } = item;\n\n  return (\n    <div className=\"spec-data-wrapper\">\n      <div className=\"spec-badge\">\n        <div><SpecBadge key={JSON.stringify(item)} item={item} /></div>\n        <div>{points}</div>\n      </div>\n      <div className=\"spec-stats\">\n        <div className=\"rank-header\">\n          <div>\n            Rank:\n            {' '}\n            {rank}\n          </div>\n        </div>\n        <div className=\"rank-data\">\n          <div>\n            Region:\n            {' '}\n            {regionRank}\n          </div>\n          <div>\n            Server:\n            {' '}\n            {serverRank}\n          </div>\n          <div>\n            Percentile:\n            {' '}\n            {roundTwoPlaces(rankPercent)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// import ErrorIcon from '@material-ui/icons/Error';\nimport { Alert } from '@material-ui/lab';\nimport React from 'react';\n\nexport const ErrorWarning = ({ errorMessage }) => (\n  <Alert className=\"error\" severity=\"error\" style={{ maxWidth: 'fit-content', margin: 'auto' }}>{errorMessage}</Alert>\n);\n","import React from 'react';\n\nexport const EncounterBadge = ({ item }) => {\n  const { encounter } = item;\n  const { name } = encounter;\n\n  const encounterImg = {\n    'High King Maulgar': 'https://assets.rpglogs.com/img/warcraft/bosses/649-icon.jpg',\n    'Gruul the Dragonkiller': 'https://assets.rpglogs.com/img/warcraft/bosses/650-icon.jpg',\n    Magtheridon: 'https://assets.rpglogs.com/img/warcraft/bosses/651-icon.jpg',\n  };\n\n  return (\n    <div className=\"encounter-badge-img\">\n      <img src={encounterImg[name]} alt={name} width=\"56\" height=\"56\" />\n    </div>\n  );\n};\n","import React from 'react';\nimport { SpecBadge } from './SpecBadge';\nimport { EncounterBadge } from './EncounterBadge';\nimport { roundTwoPlaces, millisToMinutesAndSeconds, roundNearest } from './utils';\n\n// item.item\nexport const Encounters = ({ item }) => {\n  const {\n    encounter,\n    bestAmount,\n    rankPercent,\n    medianPercent,\n    totalKills,\n    fastestKill,\n    allStars,\n  } = item;\n\n  const { name } = encounter;\n\n  const {\n    points,\n    rank,\n    serverRank,\n  } = allStars;\n\n  return (\n    <>\n      <div className=\"encounter-data-wrapper\">\n\n        <div className=\"encounter-badge\">\n          <div><EncounterBadge key={JSON.stringify(item)} item={item} /></div>\n          <div className=\"encounter-name\">{name}</div>\n        </div>\n\n        <div className=\"encounter-best-percentile\">\n          <div><SpecBadge key={JSON.stringify(item)} item={item} /></div>\n          <div>\n            {`Rank: ${roundTwoPlaces(rankPercent)}`}\n          </div>\n        </div>\n\n        <div className=\"encounter-stats\">\n          <div>\n            {`Dps/Hps: ${roundNearest(bestAmount)}`}\n          </div>\n          <div>\n            {`Fastest: ${millisToMinutesAndSeconds(fastestKill)}`}\n          </div>\n          <div>\n            {`Average Parse: ${roundTwoPlaces(medianPercent)}`}\n          </div>\n          <div>\n            {`Kills: ${totalKills}`}\n          </div>\n        </div>\n\n        <div className=\"encounter-rankings\">\n          <div>\n            {`Points: ${points}`}\n          </div>\n          <div>\n            {`World Rank: ${rank}`}\n          </div>\n          <div>\n            {`Server Rank: ${serverRank}`}\n          </div>\n        </div>\n\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { AllStars } from './AllStars';\nimport { ErrorWarning } from './ErrorWarning';\nimport { Encounters } from './Encounters';\nimport { roundTwoPlaces, capitalise } from './utils';\n\nexport const AppContainer = () => {\n  const [characterPerformance, setCharacterPerformance] = useState({});\n  const [name, setName] = useState('');\n  const [serverSlug, setServerSlug] = useState('');\n  const [serverRegion, setServerRegion] = useState('');\n  const [apiError, setApiError] = useState('');\n  const [isFetching, setIsFetching] = useState(false);\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setIsFetching(true);\n\n    axios\n      .get('/api/warcraftlogs-client', {\n        params: {\n          name,\n          serverSlug,\n          serverRegion,\n        },\n      })\n      .then((res) => {\n        setApiError('');\n        setCharacterPerformance(res.data);\n        setIsFetching(false);\n      })\n      .catch((error) => {\n        setIsFetching(false);\n        setApiError(error.response.data);\n      });\n  };\n\n  return (\n    <>\n      <header>\n        <h1>MVP</h1>\n\n        <section>\n          <form onSubmit={handleSearch}>\n            <input type=\"text\" id=\"name\" placeholder=\"Character Name\" value={name} onChange={(e) => setName(e.target.value)} />\n            <input type=\"text\" id=\"serverSlug\" placeholder=\"Server Name\" value={serverSlug} onChange={(e) => setServerSlug(e.target.value)} />\n            <input type=\"text\" id=\"serverRegion\" placeholder=\"Server Region\" value={serverRegion} onChange={(e) => setServerRegion(e.target.value)} />\n            <input type=\"submit\" value=\"Search\" disabled={isFetching} />\n          </form>\n        </section>\n      </header>\n\n      {console.log(characterPerformance)}\n\n      <section className=\"content-wrapper\">\n        {isFetching\n          && (\n          <div className=\"loading-wrapper\">\n            <CircularProgress />\n          </div>\n          )}\n        {!isFetching && apiError\n          && (\n          <div className=\"error-wrapper\">\n            <ErrorWarning errorMessage={apiError} />\n          </div>\n          )}\n        {!isFetching && !apiError && !!Object.keys(characterPerformance).length && (\n        <>\n          <section className=\"character-overview\">\n            <div className=\"character-badge\">\n              <div className=\"character-name\">{name ? capitalise(name) : 'Character'}</div>\n              <div className=\"server-name\">\n                {serverSlug ? capitalise(serverSlug) : 'Server'}\n                {' '}\n                (\n                {serverRegion || 'Region'}\n                )\n              </div>\n            </div>\n            <div className=\"charcter-avg-overview\">\n              <h4>\n                Best Parse Average:\n                {' '}\n                <span>{roundTwoPlaces(characterPerformance.bestPerformanceAverage)}</span>\n              </h4>\n              <h4>\n                Average Parse:\n                {' '}\n                <span>{roundTwoPlaces(characterPerformance.medianPerformanceAverage)}</span>\n              </h4>\n            </div>\n          </section>\n\n          <section className=\"spec-section\">\n            <div className=\"spec-section-header\">\n              <h1>Rankings By Spec</h1>\n            </div>\n\n            <div className=\"spec-section-body\">\n              {characterPerformance.allStars.map(\n                (item) => <AllStars key={JSON.stringify(item)} item={item} />,\n              )}\n            </div>\n          </section>\n\n          <section className=\"encounters-section\">\n            <div className=\"encounters-section-header\">\n              <h1>Ranking by Encounters</h1>\n            </div>\n            <div className=\"encounters-section-body\">\n              {characterPerformance.rankings.map(\n                (item) => <Encounters key={JSON.stringify(item)} item={item} />,\n              )}\n            </div>\n\n          </section>\n        </>\n        )}\n      </section>\n    </>\n  );\n};\n","import './App.css';\nimport React from 'react';\nimport { AppContainer } from './components/AppContainer';\n\nconst App = () => <AppContainer />;\n\nexport default App;\n","/* eslint-disable arrow-parens */\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}