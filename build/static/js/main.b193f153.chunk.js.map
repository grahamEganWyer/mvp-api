{"version":3,"sources":["components/SpecBadge.jsx","components/Functions.jsx","components/AllStars.jsx","components/EncounterBadge.jsx","components/Encounters.jsx","components/AppContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["SpecBadge","spec","item","className","src","Warden","Guardian","Feral","Restoration","Balance","Beastmastery","Marksmanship","Survival","Arcane","Fire","Frost","Protection","Retribution","Discipline","Holy","Shadow","Healing","Assassination","Combat","Subtlety","Elemental","Enhancement","Affliction","Demonology","Destruction","Arms","Fury","Champion","Melee","alt","capitalise","str","toUpperCase","substring","roundTwoPlaces","num","Math","round","millisToMinutesAndSeconds","millis","minutes","floor","seconds","toFixed","AllStars","points","partition","rank","possiblePoints","regionRank","serverRank","rankPercent","total","JSON","stringify","EncounterBadge","name","encounter","width","height","Encounters","bestAmount","bestSpec","medianPercent","totalKills","lockedIn","fastestKill","allStars","id","AppContainer","useState","characterPerformance","setCharacterPerformance","setName","serverSlug","setServerSlug","serverRegion","setServerRegion","type","placeholder","value","onChange","e","target","onClick","axios","get","params","then","res","data","console","log","Object","keys","length","bestPerformanceAverage","medianPerformanceAverage","map","rankings","App","handleChange","key","setState","state","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b193f153.chunk.js","sourcesContent":["import React from 'react'\n\nexport const SpecBadge = ({ item }) => {\n\n  const {\n    spec\n  } = item\n\n  const specImg = {\n    Warden: \"https://assets.rpglogs.com/img/warcraft/icons/Druid-Warden.jpg\",\n    Guardian: \"https://assets.rpglogs.com/img/warcraft/icons/Druid-Guardian.jpg\",\n    Feral: \"https://assets.rpglogs.com/img/warcraft/icons/Druid-Feral.jpg\",\n    Restoration: \"https://assets.rpglogs.com/img/warcraft/icons/Druid-Restoration.jpg\",\n    Balance: \"https://assets.rpglogs.com/img/warcraft/icons/Druid-Balance.jpg\",\n    Beastmastery: \"https://assets.rpglogs.com/img/warcraft/icons/Hunter-BeastMastery.jpg\",\n    Marksmanship: \"https://assets.rpglogs.com/img/warcraft/icons/Hunter-Marksmanship.jpg\",\n    Survival: \"https://assets.rpglogs.com/img/warcraft/icons/Hunter-Survival.jpg\",\n    Arcane: \"https://assets.rpglogs.com/img/warcraft/icons/Mage-Arcane.jpg\",\n    Fire: \"https://assets.rpglogs.com/img/warcraft/icons/Mage-Fire.jpg\",\n    Frost: \"https://assets.rpglogs.com/img/warcraft/icons/Mage-Frost.jpg\",\n    Protection: \"https://assets.rpglogs.com/img/warcraft/icons/Paladin-Protection.jpg\",\n    Retribution: \"https://assets.rpglogs.com/img/warcraft/icons/Paladin-Retribution.jpg\",\n    Discipline: \"https://assets.rpglogs.com/img/warcraft/icons/Priest-Discipline.jpg\",\n    Holy: \"https://assets.rpglogs.com/img/warcraft/icons/Priest-Holy.jpg\",\n    Shadow: \"https://assets.rpglogs.com/img/warcraft/icons/Priest-Shadow.jpg\",\n    Healing: \"https://assets.rpglogs.com/img/warcraft/icons/Priest-Healing.jpg\",\n    Assassination: \"https://assets.rpglogs.com/img/warcraft/icons/Rogue-Assassination.jpg\",\n    Combat: \"https://assets.rpglogs.com/img/warcraft/icons/Rogue-Combat.jpg\",\n    Subtlety: \"https://assets.rpglogs.com/img/warcraft/icons/Rogue-Subtlety.jpg\",\n    Elemental: \"https://assets.rpglogs.com/img/warcraft/icons/Shaman-Elemental.jpg\",\n    Enhancement: \"https://assets.rpglogs.com/img/warcraft/icons/Shaman-Enhancement.jpg\",\n    Affliction: \"https://assets.rpglogs.com/img/warcraft/icons/Warlock-Affliction.jpg\",\n    Demonology: \"https://assets.rpglogs.com/img/warcraft/icons/Warlock-Demonology.jpg\",\n    Destruction: \"https://assets.rpglogs.com/img/warcraft/icons/Warlock-Destruction.jpg\",\n    Arms: \"https://assets.rpglogs.com/img/warcraft/icons/Warrior-Arms.jpg\",\n    Fury: \"https://assets.rpglogs.com/img/warcraft/icons/Warrior-Fury.jpg\",\n    Champion: \"https://assets.rpglogs.com/img/warcraft/icons/Warrior-Champion.jpg\",\n    Melee: \"https://assets.rpglogs.com/img/warcraft/icons/Warrior-Melee.jpg\"\n  }\n\n  return (\n    <div className=\"spec-badge-img\">\n      <img src={specImg[spec]} alt={spec}/>\n    </div>\n  )\n\n}","const capitalise = (str) => {\n  return str[0].toUpperCase() + str.substring(1)\n}\n\nconst roundTwoPlaces = (num) => {\n  return Math.round(num * 100) / 100\n}\n\nconst roundNearest = (num) => {\n  return Math.round(num)\n}\n\nconst millisToMinutesAndSeconds = (millis) => {\n  var minutes = Math.floor(millis / 60000);\n  var seconds = ((millis % 60000) / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n}\n\nexport {\n  capitalise,\n  roundTwoPlaces,\n  roundNearest,\n  millisToMinutesAndSeconds\n}","import React from 'react'\nimport { SpecBadge } from './SpecBadge'\nimport { roundTwoPlaces } from './Functions'\n\n// item.item\nexport const AllStars = ({ item }) => {\n\n  const {\n    partition,\n    spec,\n    points,\n    possiblePoints,\n    rank,\n    regionRank,\n    serverRank,\n    rankPercent,\n    total\n  } = item\n\n  return (\n    <div className=\"spec-data-wrapper\">\n      <div className=\"spec-badge\">\n        <div>{<SpecBadge key={JSON.stringify(item)} item={item}/>}</div>\n        <div>{points}</div>\n      </div>\n      <div className=\"spec-stats\">\n        <div className=\"rank-header\">\n          <div>Rank: {rank}</div>\n        </div>\n        <div className=\"rank-data\">\n          <div>Region: {regionRank}</div>\n          <div>Server: {serverRank}</div>\n          <div>Percentile: {roundTwoPlaces(rankPercent)}</div>\n        </div>\n      </div>\n    </div>\n  )\n\n}","import React from 'react'\n\nexport const EncounterBadge = ({ item }) => {\n\n  const { encounter } = item\n  const { name } = encounter\n\n  const encounterImg = {\n    \"High King Maulgar\": \"https://assets.rpglogs.com/img/warcraft/bosses/649-icon.jpg\",\n    \"Gruul the Dragonkiller\": \"https://assets.rpglogs.com/img/warcraft/bosses/650-icon.jpg\",\n    \"Magtheridon\": \"https://assets.rpglogs.com/img/warcraft/bosses/651-icon.jpg\"\n  }\n\n  return (\n    <div className=\"encounter-badge-img\">\n      <img src={encounterImg[name]} alt={name} width=\"56\" height=\"56\"/>\n    </div>\n  )\n\n}","import React from 'react'\nimport { SpecBadge } from './SpecBadge'\nimport { EncounterBadge } from './EncounterBadge'\nimport { roundTwoPlaces, millisToMinutesAndSeconds, roundNearest } from './Functions'\n\n// item.item\nexport const Encounters = ({ item }) => {\n\n  const {\n    encounter,\n    bestSpec,\n    bestAmount, \n    rankPercent,\n    medianPercent,\n    lockedIn,\n    totalKills,\n    fastestKill,\n    allStars\n  } = item\n\n  const { id, name } = encounter\n\n  const { \n    points, \n    possiblePoints, \n    rank,\n    serverRank,\n    total\n  } = allStars\n\n  // Math.round(medianPercent * 100) / 100\n\n  return (\n    <>\n      <div className=\"encounter-data-wrapper\">\n\n        <div className=\"encounter-badge\">\n          <div>{<EncounterBadge key={JSON.stringify(item)} item={item}/>}</div>\n          <div className=\"encounter-name\">{name}</div>\n        </div>\n\n        <div className=\"encounter-best-percentile\">\n        <div>{<SpecBadge key={JSON.stringify(item)} item={item}/>}</div>\n          <div>Rank: {roundTwoPlaces(rankPercent)}</div>\n        </div>\n\n        <div className=\"encounter-stats\">\n          <div>Dps/Hps: {roundNearest(bestAmount)}</div>\n          <div>Fastest: {millisToMinutesAndSeconds(fastestKill)}</div>\n          <div>Average Parse: {roundTwoPlaces(medianPercent)}</div>\n          <div>Kills: {totalKills}</div>\n        </div>\n\n        <div className=\"encounter-rankings\">\n          <div>Points: {points}</div>\n          <div>World Rank: {rank}</div>\n          <div>Server Rank: {serverRank}</div>\n        </div>\n\n      </div>\n    </>\n  )\n\n}","\nimport React, { useState } from 'react'\nimport axios from 'axios'\nimport { AllStars } from './AllStars'\nimport { Encounters } from './Encounters'\nimport { roundTwoPlaces, capitalise } from './Functions'\n\nimport { EncounterBadge } from './EncounterBadge'\n\nexport const AppContainer = () => {\n\n  const [characterPerformance, setCharacterPerformance ] = useState({})\n  const [name, setName] = useState(\"\")\n  const [serverSlug, setServerSlug ] = useState(\"\")\n  const [serverRegion, setServerRegion ] = useState(\"\")\n\n  const handleSearch = () => {\n    axios\n      .get('/api/warcraftlogs-client', {\n        params: {\n          name: name,\n          serverSlug: serverSlug,\n          serverRegion: serverRegion\n         }\n        })\n      .then(res => setCharacterPerformance(res.data))\n  }\n\n  return (\n    <>\n        <header>\n          <h1>MVP</h1>\n          \n          <section>\n              <input type=\"text\" id=\"name\" placeholder=\"Character Name\" value={name} onChange={e => setName(e.target.value)}/>\n              <input type=\"text\" id=\"serverSlug\" placeholder=\"Server Name\" value={serverSlug} onChange={e => setServerSlug(e.target.value)}/>\n              <input type=\"text\" id=\"serverRegion\" placeholder=\"Server Region\" value={serverRegion} onChange={e => setServerRegion(e.target.value)}/>\n              <button onClick={handleSearch}>Search</button>\n          </section>\n        </header>\n  \n        {console.log(characterPerformance)}\n        {Object.keys(characterPerformance).length && (\n\n          <section className=\"content-wrapper\">\n\n            <section className=\"character-overview\">\n              <div className=\"character-badge\">\n                <div className=\"character-name\">{capitalise(name)}</div>\n                <div className=\"server-name\">{capitalise(serverSlug)} ({serverRegion})</div>\n              </div>\n              <div className=\"charcter-avg-overview\">\n                <h4>Best Parse Average: <span>{roundTwoPlaces(characterPerformance.bestPerformanceAverage)}</span></h4>\n                <h4>Average Parse: <span>{roundTwoPlaces(characterPerformance.medianPerformanceAverage)}</span></h4>\n              </div>\n            </section>\n\n            <section className=\"spec-section\">\n              <div className=\"spec-section-header\">\n                <h1>Rankings By Spec</h1>\n              </div>\n\n              <div className=\"spec-section-body\">\n                {characterPerformance.allStars.map(item =>\n                  <AllStars key={JSON.stringify(item)} item={item}/>)\n                }\n              </div>\n            </section>\n            \n            <section className=\"encounters-section\">\n              <div className=\"encounters-section-header\">   \n                <h1>Ranking by Encounters</h1>\n              </div>\n              <div className=\"encounters-section-body\">\n                {characterPerformance.rankings.map(item =>\n                  <Encounters key={JSON.stringify(item)} item={item}/>)\n                }\n              </div>\n\n            </section>  \n          </section>\n        )}\n    </>\n  )\n}","\nimport './App.css';\nimport React, { Component } from 'react'\nimport axios from 'axios'\nimport { AllStars } from './components/AllStars'\nimport { AppContainer } from './components/AppContainer'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      characterPerformance: {},\n      name: \"beastheart\", \n      serverSlug: \"yojamba\", \n      serverRegion: \"us\" \n    }\n  };\n\n  handleChange= (e) => {\n    var key = e.target.id\n    var value = e.target.value\n    console.log(key);\n    console.log(value);\n    this.setState({ [key]: value })\n  }\n\n  // handleSearch = () => {\n  //   axios\n  //     .get('/api/warcraftlogs-client', { \n  //       params: {  \n  //         name: this.state.name, \n  //         serverSlug: this.state.serverSlug, \n  //         serverRegion: this.state.serverRegion\n  //        } \n  //       })\n  //     .then(res => this.setState({characterPerformance: res.data}))\n  // }\n\n\n\n  millisToMinutesAndSeconds = (millis) => {\n    var minutes = Math.floor(millis / 60000);\n    var seconds = ((millis % 60000) / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n  }\n\n  render() {\n\n    return <AppContainer />\n\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}